class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        res = [1] * len(nums)
        prefix = 1
        for i in range(len(nums)):
            res[i] *= prefix
            prefix *= nums[i]

        postfix = 1
        for j in range(len(nums) - 1, -1, -1):
            res[j] *= postfix
            postfix *= nums[j]

        return res

# Time complexity - O(n)
# Space complexity - O(1)

# In this res is an output array so it is not considered for calculating the space.
# Similarly input is not calculated by the space
# Only the extra auxillary storage space is considered when calculating the space complexity
# In our case, only prefix and suffix variable is used. So the space complexity is O(1)
